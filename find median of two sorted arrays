best method  time max(logn,logm) uses binary search
double Median(vector<int> arr1,vector<int> arr2)
{
    int n=arr1.size();
    int m=arr2.size();
    
    if(n>m)
    return Median(arr2,arr1);
    
    int start=0,end=n-1,actualmid=(n+m+1)/2;
    int leftA,leftB,rightA,rightB;
    while(start<=end)
    {
        int mid=start + (end-start)/2;
        int mid1=mid;
        int mid2=actualmid-mid;
        
        leftA=mid>0?arr1[mid1-1]:INT_MIN;
        leftB=mid2>0?arr2[mid2-1]:INT_MIN;
        rightA=mid1<n?arr1[mid1]:INT_MAX;
        rightB=mid2<m?arr2[mid2]:INT_MAX;
        
        if(leftA<=rightB and leftB<=rightA)
        {
            if((m+n)%2==0)
            {
                return  (max(leftA,leftB) + min(rightA,rightB) )/ 2.0;
            }
            return max(leftA,leftB);
        }
        else if(leftA<=rightB)
        start=mid+1;
        else
        end=mid-1;
        
        
    }
    return 0;
}


best method log m , log n approach no extra memory
#include <bits/stdc++.h>
using namespace std;

double find2(int temp1,int temp2){
  return ( temp1 +temp2 )/(2.0);
}

double find3(int temp1,int temp2,int temp3)
{
  return temp1+temp2+temp3 - max( temp1, max(temp2,temp3) ) 
    - min(temp1, min(temp2,temp3) );                                                    
}          
 double find4(int temp1,int temp2,int temp3,int temp4)
 {
   int m1=max( temp1, max(temp2,max(temp3,temp4)) );
   int m2=min( temp1, min(temp2,min(temp3,temp4)) );        
   return (temp1+temp2+temp3+temp4 - m1 - m2)/(2.0);
 }
double findmediansingle(int A[],int size)
{
  if(size==1)
    return A[0];
  int n =size;
 if(size%2==0) // means even
 {
   return (A[n/2]+A[n/2 -1]) /(2.0);
 }
  else
  {
   return A[n/2]; 
  }
  
}
          // 1,2
          // 4,5,6,7 -> 5,6 where m=4
          // -> 1,2,4,5,6,7 -> 4,5 where m=6
          
float findMedianUtil( int A[], int N, int B[], int M )
{
  	if(N>M){
  	    cout<<" n>m executed";
  	    return findMedianUtil(B,M,A,N);
  	}
    
	if(N==0){
	    cout<<" n==0 executed";
	    return findmediansingle(B,M);
	}
      
  if(N==1)
  {
    if(M==1){
        cout<<"n==1 and m==1 executed";
        return find2(A[0],B[0]);
    }
      
    if(M%2==0){
        cout<<" n==1 and m==even executed";
        return find3(B[M/2],B[M/2 -1],A[0]);
    }
    	
    else{
        cout<<" n==1 and m==odd executed";
        return find2( B[M/2], find3(A[0],B[M/2-1],B[M/2+1]) ); 
    }
      
  }
  if(N==2)
  {
    if(M==2){
        cout<<" n==2 and m==2 executed";
        return find4(A[0],A[1],B[0],B[1]);
    }
    if(M%2==0)
    {
        cout<<" n==2 and m==even executed";
      return find4(B[M/2-1],B[M/2],max(A[0],B[M/2 - 2]),min(A[1],B[M/2 + 1]) );
    }
    else 
    {
        cout<<" n==2 and m==odd executed";
     return find3(B[M/2],max(A[0],B[M/2 - 1]),min(A[1],B[M/2 + 1]) );
    }
    
  }
    int idxa=(N-1)/2;int idxb=(M-1)/2;
    if(A[idxa]<=B[idxb]){
        cout<<" a.idxa < b.idxb executed";
        return findMedianUtil(A+idxa,N/2 + 1,B,M-idxa);
    }
    else{
        cout<<" b.idxb > a.idxa executed ";
        return findMedianUtil(A,N/2 + 1,B+idxa,M-idxa);
    }
      
   
 } 


// A wrapper function around findMedianUtil(). This function
// makes sure that smaller array is passed as first argument
// to findMedianUtil
// float findMedian( int A[], int N, int B[], int M )
// {
// 	if (N > M)
// 	return findMedianUtil( B, M, A, N );

// 	return findMedianUtil( A, N, B, M );
// }

// Driver program to test above functions
int main()
{
	int A[] = {1,2,3};
	int B[] = {5, 8, 10, 20};

	int N = sizeof(A) / sizeof(A[0]);
	int M = sizeof(B) / sizeof(B[0]);

// 	printf("%f", findMedian( A, N, B, M ) );
	cout<<endl<<" this is the answer  "<<findMedianUtil(A,N,B,M);
	return 0;
}
