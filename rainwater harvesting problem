on time and o1 space
 long long trappingWater(int arr[], int n){
        // code here
        int leftmax=0;int rightmax=0;
        int left=0,right=n-1;
        long long count=0;
        while(left<=right)
        {
            if(arr[left]<=arr[right])
            {
                if(arr[left]>=leftmax)leftmax=arr[left];
                else count+= leftmax-arr[left];
                
                left++;
            }
            else
            {
                if(arr[right]>=rightmax) rightmax=arr[right];
                else count+=rightmax-arr[right];
    
                right--;
            }
        }
        return count;
        
    }


on time and o 2n space solution
  long long trappingWater(int arr[], int n){
        // code here
        int leftmax=0;
        int rightmax=0;
        
        vector<pair<int,int> > v(n);
        
        for(int i=0;i<n;i++)
        {
            leftmax=max(arr[i],leftmax);
            rightmax=max(arr[n-1 - i],rightmax);
            v[i].first=leftmax;
            v[ n-1 - i].second=rightmax;
        }
        
        long long count=0;
        for(int j=1;j<n-1;j++)
        {
            long long temp = min(v[j].first,v[j].second) - arr[j];
            
            if(temp>0)
            count+=temp;
            
        }
        return count;
        
    }
